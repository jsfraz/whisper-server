name: Deploy to VPS

# Workflow for automatic deployment of an application to VPS when pushing to the main branch

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Download full history for potential change comparisons

      - name: Setup SSH and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          # Upload files to the server
          envs: GITHUB_SHA
          script_stop: true  # Stop executing further commands on error
          script: |
            # Check if project directory exists and if it's a git repository
            export ACTUAL_PATH="${{ secrets.PROJECT_PATH }}/whisper-server"
            if [ -d "$ACTUAL_PATH/.git" ]; then
              echo "Git repository exists, updating repository..."
              cd ${{ ACTUAL_PATH }}
              git pull origin main
            else
              echo "Git repository doesn't exist, setting up from scratch..."
              # Create PROJECT_PATH if it doesn't exist
              mkdir -p "$ACTUAL_PATH"
              cd "$ACTUAL_PATH"
              
              # Initialize as git repository and set remote
              git init
              git remote add origin https://github.com/jsfraz/whisper-server.git
              
              # Fetch and checkout main branch
              git fetch origin main
              git checkout -f -B main origin/main
            fi
            
            echo "Creating data directory if it doesn't exist..."
            mkdir -p data
      
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script_stop: true  # Stops executing further commands in case of error
          script: |
            export ACTUAL_PATH="${{ secrets.PROJECT_PATH }}/whisper-server"
            cd "$ACTUAL_PATH"
            
            # Check if docker-compose.prod.yml exists (sanity check)
            if [ ! -f docker-compose.prod.yml ]; then
              echo "Error: docker-compose.prod.yml not found in $ACTUAL_PATH"
              echo "Current directory contents:"
              ls -la
              exit 1
            fi

            # Create .env.prod file
            echo "Creating .env.prod file..."
            cat > .env.prod << EOL
            SERVER_URL=${{ secrets.SERVER_URL }}
            SQLITE_PASSWORD=${{ secrets.SQLITE_PASSWORD }}
            VALKEY_PASSWORD=${{ secrets.VALKEY_PASSWORD }}
            ADMIN_MAIL=${{ secrets.ADMIN_MAIL }}
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_USER=${{ secrets.SMTP_USER }}
            SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
            ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}
            REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}
            WS_ACCESS_TOKEN_SECRET=${{ secrets.WS_ACCESS_TOKEN_SECRET }}
            EOL

            # Create data directory and Firebase JSON file
            echo "Creating data directory if it doesn't exist..."
            mkdir -p data
            
            echo "Creating Firebase JSON file..."
            echo "${{ secrets.FIREBASE_JSON_BASE64 }}" | base64 --decode > data/firebase.json
            
            # Verify files were created
            echo "Verifying file creation..."
            if [ ! -f .env.prod ] || [ ! -f data/firebase.json ]; then
              echo "Error: Required files not created"
              exit 1
            fi

            # Stop running containers
            echo "Stopping current containers..."
            docker compose -f docker-compose.prod.yml --env-file .env.prod down || echo "No containers to stop"

            # Build and start containers
            echo "Building and starting containers..."
            docker compose -f docker-compose.prod.yml --env-file .env.prod up -d --build

            # Wait for the service to start
            echo "Waiting for service to start..."
            sleep 10
            
            # Verify containers are running
            echo "Checking container status..."
            docker compose -f docker-compose.prod.yml ps
      
      - name: Notify Deployment Status
        # This step will always run to report status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment completed successfully!"
          else
            echo "Deployment failed! Please check logs for details."
          fi